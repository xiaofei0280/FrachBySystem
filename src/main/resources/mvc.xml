<beans 	xmlns="http://www.springframework.org/schema/beans"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xmlns:aop="http://www.springframework.org/schema/aop"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context.xsd
							http://www.springframework.org/schema/mvc
							http://www.springframework.org/schema/mvc/spring-mvc.xsd
                            http://www.springframework.org/schema/aop
							http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 告知SpringMVC  哪些包中 存在 被注解的类
     use-default-filters=true 凡是被 @Controller @Service  @Repository注解的类，都会被扫描
     use-default-filters=false 默认不扫描包内的任何类, 只扫描include-filter中指定的类
     只扫描被@Controller注解的类
 -->
    <context:component-scan base-package="com.qf" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 注册注解开发驱动 -->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!-- 视图解析器
         作用：1.捕获后端控制器的返回值="index"
              2.解析： 在返回值的前后 拼接 ==> "/index.jsp"
     -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 前缀 -->
        <property name="prefix" value="/"></property>
        <!-- 后缀 -->
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!--处理静态资源问题-->
    <mvc:default-servlet-handler/>


   <!--声明异常解析器-->
    <bean class="com.qf.resolver.MyExceptionResolver"></bean>



    <!-- enable shiro's annotation-->
    <bean id="lifecycleBeanPostProcessor"
          class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 自动代理生成器，等价于aop:config;
         aop:config 或 AutoProxyCreator两者选其一，spring官方提醒千万不要同时使用。

    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    -->
    <aop:config></aop:config>
    <!-- 在此bean的构建过程中，初始化了一些额外功能和piontcut
         interceptors.add(new RoleAnnotationMethodInterceptor(resolver));
         interceptors.add(new PermissionAnnotationMethodInterceptor(resolver));
         interceptors.add(new AuthenticatedAnnotationMethodInterceptor(resolver));
         interceptors.add(new UserAnnotationMethodInterceptor(resolver));
         interceptors.add(new GuestAnnotationMethodInterceptor(resolver));
    -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>





    <!-- 上传解析器
	     id必须是：“multipartResolver”
 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 最大可上传的文件大小   byte 超出后会抛出MaxUploadSizeExceededException异常，可以异常解析器捕获 -->
        <property name="maxUploadSize" value="2097152"></property>
    </bean>


</beans>